volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:

networks:
  ainetwork:
    driver: bridge
    name: ainetwork
    attachable: true

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['ainetwork']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=ollama:11434
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true

    - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    - TZ=${TZ}
    - N8N_HOST=${N8N_HOST}
    - N8N_PORT=${N8N_PORT}
    - NODE_ENV=${NODE_ENV}
    - N8N_PROTOCOL=${N8N_PROTOCOL}
    - WEBHOOK_URL=${WEBHOOK_URL}
    - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
    - VUE_APP_URL_BASE_API=${VUE_APP_URL_BASE_API}

    - ALERTS_ORIGIN_MAIL=${ALERTS_ORIGIN_MAIL}
    - MAIL_PASSWORD=${MAIL_PASSWORD}
    - MAIL_PORT=${MAIL_PORT}
    - RELAYHOST=${RELAYHOST}
    - RELAYHOSTIP=${RELAYHOSTIP}
    - MYHOSTNAME=${MYHOSTNAME}
    - MYDOMAIN=${MYDOMAIN}

    - ALERT_EMAIL=${ALERT_EMAIL}
    - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    - TELEGRAM_FORMAT=${TELEGRAM_FORMAT}
    - ALERT_SEPARATOR=${ALERT_SEPARATOR}
    - MIN_RESPONSE_TIME=${MIN_RESPONSE_TIME}
    - MONITOR_INTERVAL=${MONITOR_INTERVAL}
    - ALERT_GROUPING=${ALERT_GROUPING}
    - MIN_CRITICAL_ALERTS=${MIN_CRITICAL_ALERTS}
    - ALERT_THROTTLE_MINUTES=${ALERT_THROTTLE_MINUTES}


x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['ainetwork']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['ainetwork']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['ainetwork']
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
      - ./shared/scripts:/scripts
      - ./shared/scripts/config:/monitor_config
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
      <<: *service-ollama
      profiles: ["gpu-nvidia"]
      container_name: ollama-gpu
      deploy:
        resources:
          reservations:
            devices:
              - driver: nvidia
                count: 1
                capabilities: [gpu, utility, compute]
      environment:
        - NVIDIA_VISIBLE_DEVICES=all
        - NVIDIA_DRIVER_CAPABILITIES=all  # "all" es mejor que "compute,utility"
        - CUDA_VERSION=12.8
        - OLLAMA_GPU_LAYERS=${OLLAMA_GPU_LAYERS:-35}  # Valor por defecto 35
        - OLLAMA_NO_MUL_MAT_Q=${OLLAMA_NO_MUL_MAT_Q:-true}  # Valor por defecto true
        - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-30m}  # Añadir esto
      healthcheck:
        test: ["CMD-SHELL", "ollama list | grep -q 'llama3.2' || exit 1"] 
        interval: 2m
        timeout: 1m
        retries: 3
        start_period: 5m  # Da más tiempo para cargar modelos

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    image: ollama/ollama:latest
    networks: ['ainetwork']
    container_name: ollama-pull-llama-gpu
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    environment:
      - OLLAMA_HOST=ollama-gpu:11434
      - NVIDIA_VISIBLE_DEVICES=all
    command:
      - "-c"
      - "sleep 5; ollama pull llama3.2 && ollama list"
    depends_on:
      ollama-gpu:
        condition: service_healthy

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd

  whisper-api:
    build:
      context: ./whisper
    container_name: whisper-api
    networks: ['ainetwork']
    ports:
      - "5000:5000"
    volumes:
      - ./shared/audio:/app/audio
    environment:
      - WHISPER_MODEL=base

  qdrant:
    image: qdrant/qdrant:v1.7.4
    hostname: qdrant
    container_name: qdrant
    networks: ['ainetwork']
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"  # Puerto para el dashboard
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333 || exit 0"]  # Healthcheck más tolerante
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  haystack-api:
    build:
      context: ./haystack
      dockerfile: Dockerfile
    container_name: haystack-api
    restart: unless-stopped
    networks: ['ainetwork']
    ports:
      - "8000:8000"
    volumes:
      - ./shared/docs:/app/docs
    environment:
      - DOCUMENTSTORE=qdrant
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - OLLAMA_HOST=ollama:11434
      - CUDA_VISIBLE_DEVICES=0  # Usar GPU index 0 - OPTIMIZADO PARA NVIDIA 
      - HF_HOME=/app/cache  # ara cache de modelos OPTIMIZADO PARA NVIDIA
    depends_on:
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  tts-api:
    build:
      context: ./tts-api
    container_name: tts-api
    restart: unless-stopped
    depends_on:
      - haystack-api
    networks: ['ainetwork']
    ports:
      - "5002:5002"
    volumes:
      - ./shared/audio:/data # Opcional audios generados
      - ./shared/cache/tts/tts_models:/root/.local/share/tts  # Persiste los modelos aquí
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
  ocr-router:
    build:
      context: ./ocr/ocr-router
    container_name: ocr-router
    restart: unless-stopped
    depends_on:
      - ocr-api
      - ocr-paddle
    ports:
      - "5020:5020"
    networks:
      - ainetwork

  ocr-api:
    build:
      context: ./ocr/ocr-api
    container_name: ocr-api
    restart: unless-stopped
    networks: ['ainetwork']
    ports:
      - "5003:5003"
    volumes:
      - ./ocr/shared/ocr:/data
      - ./shared/cache/ocr/huggingface_cache:/root/.cache/huggingface
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
  ocr-paddle:
    build:
      context: ./ocr/ocr-paddle
    container_name: ocr-paddle
    restart: unless-stopped
    ports:
      - "5010:5010"
    volumes:
      - ./shared/cache/ocr/paddle:/data
      - ./shared/cache/ocr/paddle/.paddleocr:/root/.paddleocr
    networks:
      - ainetwork
    deploy:
          resources:
            reservations:
              devices:
                - capabilities: [gpu]
    environment:
      NVIDIA_VISIBLE_DEVICES: all

  monitor:
    build:
      context: ./monitor
    container_name: monitor
    restart: unless-stopped
    profiles: ["monitor"]
    hostname: monitor  # Hostname interno del contenedor
    domainname: byterobot.dev # Opcional: para FQDN completo
    networks:
      ainetwork:
        aliases:
          - monitor.byterobot.dev  # Nombre DNS en la red docker
    env_file:
      - .env
    volumes:
      - ./shared:/shared
      - /var/run/docker.sock:/var/run/docker.sock
    tty: true
    stdin_open: true
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1  # Desactiva IPv6

